<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Pr0130-Introduction to Image Processing Algorithms</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m45806</md:content-id>
  <md:title>Pr0130-Introduction to Image Processing Algorithms</md:title>
  <md:abstract>The purpose of this module is to introduce you to pixel-based image processing algorithms, similar to those that you might find in commercial image editing software such as Photoshop.</md:abstract>
  <md:uuid>1044231d-0657-4cfd-b8c1-1f68e4cf07b5</md:uuid>
</metadata>

<content>
















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Images">

Images

</link>


</item>



			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1004">
<link id="a1004" target-id="Preview">

Preview

</link>


	

<list id="ul1003" list-type="bulleted">

		

<item id="li1005">
<link id="a1005" target-id="Deduce_the_algorithm">

Deduce the algorithm

</link>


</item>


		

<item id="li1006">
I

<link id="a1006" target-id="Implement_the_algorithm">

mplement the algorithm

</link>


</item>


		

<item id="li1007">
<link id="a1007" target-id="Program_output">

Program output

</link>


</item>


		

<item id="li1008">
<link id="a1008" target-id="The_algorithm">

The algorithm

</link>


<list id="ul1004" list-type="bulleted">

			

<item id="li1009">
<link id="a1009" target-id="Obvious_that_the_blue_color_value_is_reduced_to_zero">

Obvious that the blue color value is reduced to zero

</link>


</item>


			

<item id="li1010">
<link id="a1010" target-id="Color_inversion_is_not_quite_so_obvious">

Color inversion is not quite so obvious

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1011">
<link id="a1011" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1005" list-type="bulleted">

		

<item id="li1012">
<link id="a1012" target-id="Will_explain_in_fragments">

Will explain in fragments

</link>


</item>


		

<item id="li1013">
<link id="a1013" target-id="The_driver_class_named_Pr0130a">

The driver class named Pr0130a

</link>


</item>


		

<item id="li1014">
<link id="a1014" target-id="The_runner_class_named_Pr0130aRunner">

The runner class named Pr0130aRunner

</link>


</item>


	

</list>


	

</item>


	

<item id="li1015">
<link id="a1015" target-id="Run_the_program">

Run the program

</link>


</item>


	

<item id="li1016">
<link id="a1016" target-id="Summary">

Summary

</link>

 

</item>


	

<item id="li1017">
<link id="a1017" target-id="Whats_next">

What's next?

</link>


</item>


	

<item id="li1018">
<link id="a1018" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1019">
<link id="a1019" target-id="Complete_program_listing">

Complete program listing

</link>


</item>




</list>


	

	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	

	

<para id="p1000">
This module is one in a collection of modules designed to teach you about 
	the 

<link id="a1020" url="http://processing.org/">

Processing

</link>

 open source programming environment.

</para>




<para id="p1001">
 

<link id="a1021" url="http://processing.org/">

Processing

</link>

 is a Java-based OOP programming environment for people who want to create images, animations, and interactions.

</para>




<para id="p1002">
The purpose of this module is to introduce you to pixel-based image 
processing algorithms, similar to those that you might find in commercial image 
editing software such as 

<link id="a1022" url="http://www.photoshop.com/">

Photoshop

</link>

.

</para>




<para id="p1003">
Click 

<link id="a1023" url="index.html">

here

</link>

 to view the 
JavaScript version of the sketch discussed in this module in your HTML 5 
compatible browser.

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1004">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the images 
and listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Images" effect="bold">

Images

</emphasis>


</title>


	

<list id="ul1006" list-type="bulleted">

		

<item id="li1020">
<link id="a1024" target-id="Image_1">

Image 1

</link>

. The raw image displayed in an image explorer. 

</item>


		

<item id="li1021">
<link id="a1025" target-id="Image_2">

Image 2

</link>

. The modified image displayed in an image explorer. 

</item>




	

</list>




</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1007" list-type="bulleted">

		

<item id="li1022">
<link id="a1026" target-id="Listing_1">

Listing 1

</link>

. Copy pixel colors from the input image to the display image. 

</item>


		

<item id="li1023">
<link id="a1027" target-id="Listing_2">

Listing 2

</link>

. The remainder of the for loop. 

</item>


		

<item id="li1024">
<link id="a1028" target-id="Listing_3">

Listing 3

</link>

. The remainder of the run method. 

</item>


		

<item id="li1025">
<link id="a1029" target-id="Listing_4">

Listing 4

</link>

. Class Pr0130a.

</item>


		

<item id="li1026">
<link id="a1030" target-id="Listing_5">

Listing 5

</link>

. Class Pr0130aRunner.

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1005">
The program that I will explain in this module is designed to be used as 
	a preliminary test of the student's understanding of programming using Java 
	and Processing Development Environment 

<emphasis id="em1000" effect="italics">
(PDE)

</emphasis>
.

</para>




<para id="p1006">
If this were a real test, the student would be provided an image file named 

<emphasis id="strong1000" effect="bold">

Pr0130a.jpg

</emphasis>
 along with a 
pair of stand-alone Processing applications. Those applications would produce the raw image and a modified 
version of the raw image, each in an image explorer, as shown in 

<link id="a1031" target-id="Image_1">


Image 1

</link>

 and


<link id="a1032" target-id="Image_2">


Image 2

</link>

. 

<emphasis id="em1001" effect="italics">
(Click 

</emphasis>
<link id="a1033" url="index.html">


<emphasis id="em1002" effect="italics">
here

</emphasis>
</link>


<emphasis id="em1003" effect="italics">
 to 
view the modified image version of the sketch in your HTML 5 compatible 
browser.)

</emphasis>
</para>




<section id="h21001">
<title>
<emphasis id="Deduce_the_algorithm" effect="bold">

Deduce the algorithm

</emphasis>


</title>




<para id="p1007">
The first requirement would be for the student to examine the raw 
image shown in the image explorer window in 


<link id="a1034" target-id="Image_1">


Image 1

</link>

 and to deduce the algorithm required to transform that image into the 
modified image shown in 
the image explorer window in


<link id="a1035" target-id="Image_2">


Image 2

</link>

.

</para>




</section>
<section id="h21002">
<title>
<emphasis id="Implement_the_algorithm" effect="bold">

Implement the algorithm

</emphasis>


</title>




<para id="p1008">
The second requirement would be for the student to implement the 
algorithm once it is established. Among other things, this would require that the 
student be able to:

</para>




<list id="ul1008" list-type="bulleted">

	

<item id="li1027">
Load an image from an image file.

</item>


	

<item id="li1028">
Modify the pixels in the image according to the algorithm.

</item>


	

<item id="li1029">
Write one sketch to display the raw image in an image explorer 
	window before it is modified.

</item>


	

<item id="li1030">
Write another sketch to display the modified image in another image explorer 
	window after it is modified.

</item>




</list>




<para id="p1009">
<emphasis id="em1004" effect="italics">
(Instructions for writing an image explorer sketch were provided in 


<link url="/content/m45799/latest/?collection=col11492/latest" id="a1036">

Pr0120-Image Explorer

</link>

.)

</emphasis>
</para>




</section>
<section id="h21003">
<title>
<emphasis id="Program_output" effect="bold">

Program output

</emphasis>


</title>




<para id="p1010">



<link id="a1037" target-id="Image_1">


Image 1

</link>

 shows the raw image being displayed in an image explorer window. Note the red, green, and blue color component values 
and the coordinates of the pixel to which those colors belong.

</para>






<figure id="figure1000" type="figure">
<label>Figure</label>


<title>
<emphasis id="Image_1" effect="bold">
</emphasis>
Image 1. The raw image displayed in an image explorer.
</title>





<media id="media1000" alt="The raw image displayed in an image explorer." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/pr0130a1.jpg" width="372" height="370"/>
</media>




<caption>Image 1. The raw image displayed in an image explorer.</caption>
</figure>








<para id="p1011">
<link id="a1038" target-id="Image_2">

Image 2

</link>

 shows the modified image in an image explorer 
window. Once again, note the red, green, and blue color 
component values and the coordinates of the pixel to which those colors belong.

</para>






<figure id="figure1001" type="figure">
<label>Figure</label>


<title>
<emphasis id="Image_2" effect="bold">
</emphasis>
Image 2. The modified image displayed in an image explorer.
</title>





<media id="media1001" alt="The modified image displayed in an image explorer." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/pr0130a2.jpg" width="372" height="370"/>
</media>




<caption>Image 2. The modified image displayed in an image explorer.</caption>
</figure>








</section>
<section id="h21004">
<title>
<emphasis id="The_algorithm" effect="bold">

The algorithm

</emphasis>


</title>




<para id="p1012">
The algorithm required to transform the image from


<link id="a1039" target-id="Image_1">


Image 1

</link>

 to


<link id="a1040" target-id="Image_2">


Image 2

</link>

 is:

</para>




<list id="ul1009" list-type="bulleted">

	

<item id="li1031">
Set the blue color value for every pixel to zero.

</item>


	

<item id="li1032">
Invert the red and green color values for every pixel.

</item>




</list>




<para id="p1013">
A color value is inverted by subtracting the color value from 255. 

</para>




<section id="h31002">
<title>
<emphasis id="Obvious_that_the_blue_color_value_is_reduced_to_zero" effect="bold">

Obvious that the blue color value is reduced to zero

</emphasis>


</title>




<para id="p1014">
By exploring the pixel colors at several different locations, it should be 
obvious to the student that the blue pixel value has been set to zero for 
every pixel in the modified image.

</para>




</section>
<section id="h31003">
<title>
<emphasis id="Color_inversion_is_not_quite_so_obvious" effect="bold">

Color inversion is not quite so obvious

</emphasis>


</title>




<para id="p1015">
Deducing that the red and green colors in the output pixels are the inverse 
of the red and green colors in the input image isn't as straightforward. 
However, color inversion is one of the most common forms of image color 
manipulation, so a little research on the web should suffice to figure it out. I have also published 
several online tutorials that involve color inversion.

</para>




<para id="p1016">
The implementation of the algorithm will be explained below.

</para>


	

	

</section>
</section>
</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	

	

<section id="h21005">
<title>
<emphasis id="Will_explain_in_fragments" effect="bold">

Will explain in fragments

</emphasis>


</title>




<para id="p1017">
This sketch consists of two classes, which are provided in


<link id="a1041" target-id="Listing_4">

Listing 4

</link>

 and 

<link id="a1042" target-id="Listing_5">

Listing 5

</link>

.

</para>




<para id="p1018">
I will break the sketch down and explain it in fragments.

</para>




</section>
<section id="h21006">
<title>
<emphasis id="The_driver_class_named_Pr0130a" effect="bold">

The driver class named Pr0130a

</emphasis>


</title>




<para id="p1019">
The driver class named 

<emphasis id="strong1001" effect="bold">
Pr0130a

</emphasis>
, which is shown in its entirety in 

<link id="a1043" target-id="Listing_4">


Listing 4

</link>

, is almost exactly like the class that I explained in 


<link url="/content/m45799/latest/?collection=col11492/latest" id="a1044">

Pr0120-Image Explorer

</link>


<emphasis id="em1005" effect="italics">
.

</emphasis>
 
Therefore, I won't repeat that explanation in this module.

</para>




</section>
<section id="h21007">
<title>
<emphasis id="The_runner_class_named_Pr0130aRunner" effect="bold">

The runner class named 
Pr0130aRunner

</emphasis>


</title>




<para id="p1020">
The runner class named 

<emphasis id="strong1002" effect="bold">
Pr0130aRunner

</emphasis>
 is shown in 

<link id="a1045" target-id="Listing_5">


Listing 5

</link>

. This class is only slightly different from the class that I 
explained in 


<link url="/content/m45799/latest/?collection=col11492/latest" id="a1046">

Pr0120-Image Explorer

</link>


<emphasis id="em1006" effect="italics">
.

</emphasis>
 
Therefore, I will explain only those portions of the class that are different in 
this module.

</para>




<section id="h31004">
<title>
<emphasis id="The_first_difference" effect="bold">

The first difference

</emphasis>


</title>


	

<para id="p1021">
The first difference begins within the 

<emphasis id="strong1003" effect="bold">
for

</emphasis>
 loop shown in
	

<link id="a1047" target-id="Listing_1">

Listing 1

</link>

. Recall that in the original version in 


<link url="/content/m45799/latest/?collection=col11492/latest" id="a1048">

Pr0120-Image Explorer

</link>

, the 
	code in the 

<emphasis id="strong1004" effect="bold">
for

</emphasis>
 loop copied pixel colors from the input 
	image to the output image taking the different widths of the images into 
	account.

</para>




<para id="p1022">
This version is essentially the same except that in this version, the code 
inverts the red and green color values and sets the blue color value to zero 
before inserting the pixel color into the output image.

</para>







	

<figure id="figure1002" type="figure">
<label>Figure</label>


		


			


				

<title>
<emphasis id="Listing_1" effect="bold">
</emphasis>
Listing 1. Copy pixel colors from the input image to the display image.
</title>

			


		



		


			


				




<code id="pre1000" display="block">
      //Copy pixel colors from the input image to the
      // display image. 
      for(int cnt = 0;cnt &lt; img.pixels.length;cnt++){
        //Get and save RGB color values for current pixel.
        reD = red(img.pixels[cnt]);
        greeN = green(img.pixels[cnt]);
        bluE = blue(img.pixels[cnt]);

        //color c = color(reD, greeN, bluE);//raw
        color c = color(255-reD, 255-greeN, 0);//modified
</code>



				

<caption>Listing 1. Copy pixel colors from the input image to the display image.</caption>
</figure>

			


		



	





	

</section>
<section id="h31005">
<title>
 

<emphasis id="Construct_output_pixel_color_" effect="bold">

Construct output pixel color 
	

</emphasis>


</title>




<para id="p1023">
 You can selectively enable and disable the last two lines of code in
	

<link id="a1049" target-id="Listing_1">

Listing 1

</link>

 to cause the output image to be either the raw image


<emphasis id="em1007" effect="italics">
(as in 

<link id="a1050" target-id="Image_1">

Image 1

</link>

)

</emphasis>
 or  a modified version of the raw image


<emphasis id="em1008" effect="italics">
(as in 

<link id="a1051" target-id="Image_2">

Image 2

</link>

).

</emphasis>
 As explained


<link id="a1052" target-id="The_algorithm">

earlier

</link>

, the  red and green color components are  inverted and the blue color component 
is set to zero in the last line of code in
	

<link id="a1053" target-id="Listing_1">

Listing 1

</link>

.

</para>




</section>
<section id="h31006">
<title>
<emphasis id="The_remainder_of_the_for_loop" effect="bold">

The remainder of the for loop

</emphasis>


</title>




<para id="p1024">
The code in 

<link id="a1054" target-id="Listing_2">

Listing 2

</link>

 is the same as in 

<emphasis id="em1009" effect="italics">



<link url="/content/m45799/latest/?collection=col11492/latest" id="a1055">


Pr0120-Image Explorer

</link>

. 

</emphasis>
It is included here to provide 
continuity in the discussion.

</para>





	

<figure id="figure1003" type="figure">
<label>Figure</label>


		


			


				

<title>
<emphasis id="Listing_2" effect="bold">
</emphasis>
Listing 2. The remainder of the for loop.
</title>

			


		



		


			


				




<code id="pre1001" display="block">
        if(width &gt;= img.width){
          if((cnt % img.width == 0) &amp;&amp; (cnt != 0)){
            //Compensate for excess display width by
            // increasing the output counter.
            ctr += (width - img.width);
          }//end if
          //Store the pixel in the output pixel array
          // and increment the output counter.
          pixels[ctr] = c;
          ctr++;
        }//end if
      }//end for loop
      updatePixels();//required
    }//end else
</code>



				

<caption>Listing 2. The remainder of the for loop.</caption>
</figure>

			


		



	





	

</section>
<section id="h31007">
<title>
<emphasis id="The_remainder_of_the_run_method" effect="bold">

The remainder of the run method

</emphasis>


</title>




<para id="p1025">
The code in 

<link id="a1056" target-id="Listing_3">

Listing 3

</link>

 is only slightly different 
from the code in 

<emphasis id="em1010" effect="italics">



<link url="/content/m45799/latest/?collection=col11492/latest" id="a1057">


Pr0120-Image Explorer

</link>


</emphasis>
.

</para>





	

<figure id="figure1004" type="figure">
<label>Figure</label>


		


			


				

<title>
<emphasis id="Listing_3" effect="bold">
</emphasis>
Listing 3. The remainder of the run method.
</title>

			


		



		


			


				




<code id="pre1002" display="block">

    
    //Display the author's name on the output.
    text("Dick Baldwin",10,20);
    
    //Disable the requirement to press a mouse button to 
    // display information about the pixel.
//    if(mousePressed){
      displayPixelInfo(img);
//    }//end if
  }//end run
</code>



				

<caption>Listing 3. The remainder of the run method.</caption>
</figure>

			


		



	







<para id="p1026">
The call to the 

<emphasis id="strong1005" effect="bold">
text

</emphasis>
 method was inserted in


<link id="a1058" target-id="Listing_3">

Listing 3

</link>

 to display my name in the upper-left corner 
of 

<link id="a1059" target-id="Image_2">

Image 2

</link>

.

</para>




<para id="p1027">
The call to the 

<emphasis id="strong1006" effect="bold">
displayPixelInfo

</emphasis>
 method was removed from the


<emphasis id="strong1007" effect="bold">
if

</emphasis>
 statement in 

<link id="a1060" target-id="Listing_3">

Listing 3

</link>

. This causes 
the pixel information shown at the bottom of 

<link id="a1061" target-id="Image_2">

Image 2

</link>

 to 
be displayed any time that the mouse pointer is inside the display window with 
no requirement to press a mouse button to display the information.

</para>




<para id="p1028">
<emphasis id="em1011" effect="italics">
(The information is actually displayed all of the time based on the last 
known location of the mouse pointer. At the beginning, the mouse pointer is 
assumed to be at coordinates 0,0. After that, if the mouse enters and then leaves the output 
display window, the last known location is the point on the edge where it left 
the window.)

</emphasis>
</para>



	

</section>
<section id="h31008">
<title>
<emphasis id="The_remainder_of_the_class_named_class_Pr0130aRunner" effect="bold">

The remainder of the class named class Pr0130aRunner

</emphasis>


</title>




<para id="p1029">
The remainder of the class named class 

<emphasis id="strong1008" effect="bold">
Pr0130aRunner

</emphasis>
 is essentially the same as before. I 
explained the entire class 

<emphasis id="em1012" effect="italics">
in


<link url="/content/m45799/latest/?collection=col11492/latest" id="a1062">


Pr0120-Image Explorer

</link>


</emphasis>
 and won't repeat that explanation in this 
module.

</para>






</section>
</section>
</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>






<para id="p1030">
I encourage you to copy the code from 

<link id="a1063" target-id="Listing_4">

Listing 4

</link>

 and 


<link id="a1064" target-id="Listing_5">

Listing 5

</link>

 into your PDE. Be sure to put the code from


<link id="a1065" target-id="Listing_4">

Listing 4

</link>

 in the leftmost tab.

</para>




<para id="p1031">
Don't forget to put an image file of your choice in a folder named 

<emphasis id="strong1009" effect="bold">

data

</emphasis>
 that is a child of the folder that contains the files with the 
.pde extension. You will need to edit the code from 

<link id="a1066" target-id="Listing_4">


Listing 4

</link>

 to change the name of the image file in 

<emphasis id="em1013" effect="italics">
two different places

</emphasis>
. Change the 
name from 

<emphasis id="strong1010" effect="bold">
Pr0130a.jpg

</emphasis>
 to the name of your file.

</para>




<para id="p1032">
Run the sketch 
and observe the results. Experiment with the code. Make changes, run the sketch again, and observe the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>




<para id="p1033">
Don't forget to also create and run the JavaScript version of your sketch in 
your HTML 5 compatible browser. 

</para>




<para id="p1034">
Click 

<link id="a1067" url="index.html">

here

</link>

 to view my 
JavaScript version of the sketch in your HTML 5 
compatible browser.

</para>




<para id="p1035">
If you have a programmable Android device

<emphasis id="em1014" effect="italics">
, 

</emphasis>
try creating and running the Android version of your sketch in your 
Android device.

</para>




<para id="p1036">
Also try creating and running the stand-alone version of the sketch by 
selecting 

<emphasis id="strong1011" effect="bold">
Export Application

</emphasis>
 from the 

<emphasis id="strong1012" effect="bold">
File

</emphasis>
 
menu while in 

<emphasis id="strong1013" effect="bold">
Java

</emphasis>
 mode.

</para>


	

</section>
<section id="h11005">
<title>
<emphasis id="Summary" effect="bold">

Summary

</emphasis>


</title>




<para id="p1037">
This module introduced you to pixel-based image processing algorithms, 
similar to those that you might find in commercial image editing software such 
as 

<link id="a1068" url="http://www.photoshop.com/">

Photoshop

</link>

.

</para>




<para id="p1038">
Click 

<link id="a1069" url="index.html">

here

</link>

 to view the 
JavaScript version of the sketch discussed in this module in your HTML 5 
compatible browser.

</para>


	

</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1039">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1000" type="miscellaneous">


		


			


				

<emphasis id="strong1014" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1010" list-type="bulleted">

					

<item id="li1033">
Module name: Pr0130-Introduction to Image Processing 
					Algorithms

</item>


					

<item id="li1034">
File: Pr0130.htm


</item>


					

<item id="li1035">
Published: 02/26/13

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="miscellaneous">


		


			


				

<emphasis id="strong1015" effect="bold">
Disclaimers:

</emphasis>
<para id="p1040">
<emphasis id="strong1016" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1041">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1042">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1043">
<emphasis id="strong1017" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





</section>
<section id="h11007">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1044">
Complete listings of the classes discussed in this module are provided in


<link id="a1070" target-id="Listing_4">

Listing 4

</link>

 and 

<link id="a1071" target-id="Listing_5">

Listing 5

</link>

.

</para>






	

<figure id="figure1005" type="figure">
<label>Figure</label>


		


			


				

<title>
<emphasis id="Listing_4" effect="bold">
</emphasis>
Listing 4. Class  				Pr0130a.
</title>

			


		



		


			


				




<code id="pre1003" display="block">
/*Pr0130a.pde
Copyright 2013, R.G.Baldwin

Program illustrates how to write a relatively simple image
processing algorithm and how to display the output in
an image explorer. The image explorer displays the 
coordinates of the mouse pointer along with the RGB color 
values of the pixel at the mouse pointer. Also displays 
the width and height of the image.

Displays an error message in place of the image if the 
image is wider or taller than the output display window.
**********************************************************/
//@pjs preload required for JavaScript version in browser.
/* @pjs preload="Pr0130a.jpg"; */

PImage img;
PFont font;

Pr0130aRunner obj;
void setup(){
  //This size matches the width of the image and allows
  // space below the image to display the text information.
  size(365,344);
  frameRate(30);
  img = loadImage("Pr0130a.jpg");
  obj = new Pr0130aRunner();
  font = createFont("Arial",16,true);
}//end setup
//-------------------------------------------------------//
void draw(){
  obj.run();
}//end draw
</code>



				

<caption>Listing 4. Class  				Pr0130a.</caption>
</figure>

			


		



	








	

<figure id="figure1006" type="figure">
<label>Figure</label>


		


			


				

<title>
<emphasis id="Listing_5" effect="bold">
</emphasis>
Listing 5. Class  				Pr0130aRunner.
</title>

			


		



		


			


				




<code id="pre1004" display="block">
class Pr0130aRunner{
 
  void run(){
    background(255);//white
    
    textFont(font,16);//Set the font size, and color
    fill(0);//black text
    
    loadPixels();//required
    img.loadPixels();//required
    
    float reD,greeN,bluE;//store color values here
    int ctr = 0;//output pixel array counter

    //Display error message in place of image if the 
    // image won't fit in the display window.    
    if(img.width &gt; width){
      text("--Image too wide--",10,20);
      text("Image width: " + img.width,10,40);
      text("Display width: " + width,10,60);
    }else if(img.height &gt; height){
      text("--Image too tall--",10,20);
      text("Image height: " + img.height,10,40);
      text("Display height: " + height,10,60);
    }else{
      //Copy pixel colors from the input image to the
      // display image. 
      for(int cnt = 0;cnt &lt; img.pixels.length;cnt++){
        //Get and save RGB color values for current pixel.
        reD = red(img.pixels[cnt]);
        greeN = green(img.pixels[cnt]);
        bluE = blue(img.pixels[cnt]);

        //Construct output pixel color
        //Selectively enable and disable the following two
        // statements to display either the raw image, or
        // a modified version of the raw image where the
        // red and green color components have been
        // inverted and the blue color component has been
        // set to zero.
        //color c = color(reD, greeN, bluE);//raw
        color c = color(255-reD, 255-greeN, 0);//modified
        
        if(width &gt;= img.width){
          if((cnt % img.width == 0) &amp;&amp; (cnt != 0)){
            //Compensate for excess display width by
            // increasing the output counter.
            ctr += (width - img.width);
          }//end if
          //Store the pixel in the output pixel array
          // and increment the output counter.
          pixels[ctr] = c;
          ctr++;
        }//end if
      }//end for loop
      updatePixels();//required
    }//end else
    
    //Display the author's name on the output.
    text("Dick Baldwin",10,20);
    
    //Disable the requirement to press a mouse button to 
    // display information about the pixel.
//    if(mousePressed){
      displayPixelInfo(img);
//    }//end if
  }//end run
  
  //-----------------------------------------------------//
  //Method to display coordinate and pixel color info at
  // the current mouse pointer location. Also displays 
  // width and height information about the image.
  void displayPixelInfo(PImage image){
    //Protect against mouse being outside the frame
    if((mouseX &lt; width) &amp;&amp; (mouseY &lt; height) &amp;&amp; 
       (mouseX &gt;= 0) &amp;&amp; (mouseY &gt;= 0)){
      
      //Get and display the width and height of the
      // image.
      text("Width: " + image.width + "  Height: " + 
                       image.height,10,height - 50);
      
      //Get and display coordinates of mouse pointer.
      text("X: " + mouseX + ",  Y: " + mouseY,10,
                                       height - 30);
 
      //Get and display color data for the pixel at the
      // mouse pointer.
      text("R: " + red(pixels[mouseY*width+mouseX]) +
           "  G: " + green(pixels[mouseY*width+mouseX]) +
           "  B: " + blue(pixels[mouseY*width+mouseX]),
                                    10,height - 10);
    }//end if
  }//end displayPixelInfo
}//end class Pr0130aRunner
</code>



				

<caption>Listing 5. Class  				Pr0130aRunner.</caption>
</figure>

			


		



	







<para id="p1045">
-end- 

</para>






</section>
</content>




</document>